# -*- coding: utf-8 -*-
"""04. Projeto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wWAVKeCuzcsbH6lrF_7cqDHdFUqvDnvY

# Projeto Ciência de Dados - Previsão de Vendas

Nosso desafio é conseguir prever as vendas que vamos ter em determinado período com base nos gastos em anúncios nas 3 grandes redes que a empresa "Hashtag" investe: TV, Jornal e Rádio

### Passo a Passo

- Passo 01: Ask - Entendimento do Desafio/Entendimento da Área/Empresa;
- Passo 02: Prepare - Extração/Obtenção de Dados;
- Passo 03: Process - Tratamento/Limpeza dos Dados (Data cleansing);
- Passo 04: Analyse - Análise Exploratória (EDA);
- Passo 05: Share - Plotagem das previsões;
- Passo 06: Act - Interpretação de Resultados.

### Passo 01 - Ask:

Nosso desafio é conseguir prever as vendas que vamos ter em determinado período com base nos gastos em anúncios nas 3 grandes redes que a empresa "Hashtag" investe: TV, Jornal e Rádio;

* TV, Jornal e Rádio estão em milhares de reais;
* Vendas estão em milhões.

### Passo 02: Prepare:
"""

!pip install matplotlib
!pip install seaborn
!pip install scikit-learn

# Bibliotecas
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

df_ads = pd.read_csv("/content/DataSet_Advertising.csv")
display(df_ads)

"""### Nesse exemplo de projeto, a df_ads já foi limpa e está pronta para análise, então o passo 03 - process já foi realizado!

### Passo 04 - Analyse: 

- Tentar visualizar como as informações de cada item estão distribuídas;
- Achar a correlação entre cada um dos itens.
"""

# Observar a correlação dos dados:
df_ads.corr()

sns.heatmap(df_ads.corr(), annot=True, cmap="crest")
plt.show()

sns.pairplot(df_ads)
plt.show()

# Separar os dados para treino e para teste:
y = df_ads["Vendas"]    # Quem queremos prever, nesse caso "Vendas".
x = df_ads.drop("Vendas", axis=1)   # Quem iremos usar para treinar, no caso, o resto da tebela.

x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=0.3, random_state=1)

# Criar os modelos:
modelo_regressaoLinear = LinearRegression()
modelo_arvoreDecisao = RandomForestRegressor()

# treinar os modelos::
modelo_regressaoLinear.fit(x_treino, y_treino)
modelo_arvoreDecisao.fit(x_treino, y_treino)

# R² (Coeficiente de determinação) do nosso modelo:
previsao_regressaoLinear = modelo_regressaoLinear.predict(x_teste)
previsao_arvoreDecisao = modelo_arvoreDecisao.predict(x_teste)

# comparar os modelos
print(metrics.r2_score(y_teste, previsao_regressaoLinear))
print(metrics.r2_score(y_teste, previsao_arvoreDecisao))

"""### Passo 05: Share:"""

tabela_auxiliar = pd.DataFrame()
tabela_auxiliar["y_teste"] = y_teste
tabela_auxiliar["Previsoes ArvoreDecisao"] = previsao_arvoreDecisao
tabela_auxiliar["Previsoes Regressao Linear"] = previsao_regressaoLinear

plt.figure(figsize=(15,6))
sns.lineplot(data=tabela_auxiliar)
plt.show()

# Nova previsão com os dados da DataSet_novos:
df_novos = pd.read_csv("/content/DataSet_novos.csv")
display(df_novos)

previsao = modelo_arvoredecisao.predict(df_novos)
print(previsao)

sns.barplot(x=x_treino.columns, y=modelo_arvoredecisao.feature_importances_)
plt.show()

# Comparar Radio com Jornal
print(df_novos[["Radio", "Jornal"]].sum())

"""# Notebook do Marcos - (づ｡◕‿‿◕｡)づ (ﾉ◕ヮ◕)ﾉ ヽ(^◇^*)/"""